---
# Global settings
download_dir: '/vagrant'
#
shibboleth_sp_URL: 'shibboleth-sp.vagrant.dev'
shibboleth_idp_URL: 'shibboleth-idp.vagrant.dev'
# LDAP
profiles::ldap::ldap_suffix: 'dc=vagrant,dc=dev'
profiles::ldap::ldap_admin: 'admin'
profiles::ldap::ldap_admin_pw: 'vagrant'
profiles::ldap::ldap_uri: 'ldap://192.168.65.5'
profiles::ldap::ldap_use_ssl: 'false'
# Shibboleth IdP
idp_download_dir: '/vagrant'
idp_version: '3.1.2'
idp_status_page_allowed_ips: "'192.168.65.0/24', '127.0.0.1/32', '::1/128'"
idp_servers:
  - shibboleth-idp1.vagrant.dev
  - shibboleth-idp2.vagrant.dev
# Time management
timezone::timezone: 'Europe/Paris'
ntp::restrict:
  - 'default ignore'
  - '-6 default ignore'
  - '127.0.0.1'
  - '-6 ::1'
ntp::package_ensure: 'latest'
ntp::enable: true
# Metrics collection
collectd::purge: true
collectd::recurse: true
collectd::purge_config: true
collectd::plugin::write_graphite::graphitehost: 'monitor.vagrant.dev'
# System tuning & hardening
sysctl::base::purge: true
sysctl::base::hiera_merge_values: true
sysctl::base::values:
### IMPROVE SYSTEM MEMORY MANAGEMENT ###
# Do less swapping
  vm.swappiness:
    value: '10'
  vm.dirty_ratio:
    value: '80'
  vm.dirty_background_ratio:
    value: '5'
### GENERAL NETWORK SECURITY OPTIONS ###
#
# Number of times SYNACKs for passive TCP connection.
  net.ipv4.tcp_synack_retries:
    value: '2'
# Allowed local port range
  net.ipv4.ip_local_port_range:
    value: '2000 65535'
# Protect Against TCP Time-Wait
  net.ipv4.tcp_rfc1337:
    value: '1'
# Decrease the time default value for tcp_fin_timeout connection
  net.ipv4.tcp_fin_timeout:
    value: '15'
# Decrease the time default value for connections to keep alive
  net.ipv4.tcp_keepalive_time:
    value: '300'
  net.ipv4.tcp_keepalive_probes:
    value: '5'
  net.ipv4.tcp_keepalive_intvl:
    value: '15'
### TUNING NETWORK PERFORMANCE ###
#
# Default Socket Receive Buffer
#sysctl { 'net.core.rmem_default': value => '31457280' }
#
# Maximum Socket Receive Buffer
  net.core.rmem_max:
    value: '16777216'
# Default Socket Send Buffer
#sysctl { 'net.core.wmem_default': value => '31457280' }
# Maximum Socket Send Buffer
  net.core.wmem_max:
    value: '16777216'
# Increase number of incoming connections
  net.core.somaxconn:
    value: '8096'
  net.ipv4.tcp_max_syn_backlog:
    value: '8096'
# Increase number of incoming connections backlog
  net.core.netdev_max_backlog:
    value: '5000'
# Increase the maximum amount of option memory buffers
  net.core.optmem_max:
    value: '25165824'
# Increase the maximum total buffer-space allocatable
# This is measured in units of pages (4096 bytes)
#sysctl { 'net.ipv4.tcp_mem': value => '65536 131072 262144' }
#sysctl { 'net.ipv4.udp_mem': value => '65536 131072 262144' }
# Increase the read-buffer space allocatable
  net.ipv4.tcp_rmem:
    value: '4096 12582912 16777216'
  net.ipv4.udp_rmem_min:
    value: '16384'
# Increase the write-buffer-space allocatable
  net.ipv4.tcp_wmem:
    value: '4096 12582912 16777216'
  net.ipv4.udp_wmem_min:
    value: '16384'
# Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
  net.ipv4.tcp_max_tw_buckets:
    value: '1440000'
  net.ipv4.tcp_tw_recycle:
    value: '1'
  net.ipv4.tcp_tw_reuse:
    value: '1'
  net.ipv4.tcp_slow_start_after_idle:
    value: '0'
haproxy::service_ensure: 'running'
haproxy::package_ensure: '1.5'
haproxy::global_options:
  log: '127.0.0.1 local0 notice'
  maxconn: '120000'
  spread-checks: '4'
  user: 'haproxy'
  group: 'haproxy'
  chroot: '/var/lib/haproxy'
  pidfile: '/var/run/haproxy.pid'
  daemon: ''
  stats:
    - 'socket /var/run/haproxy.sock mode 600 level admin'
    - 'timeout 2m'
    - 'maxconn 10'
haproxy::defaults_options:
  log: 'global'
  retries: '3'
  balance: 'roundrobin'
  maxconn: '10000'
  option: 
    - 'redispatch'
    - 'abortonclose'
    - 'dontlognull'
    - 'forwardfor'
    - 'httplog'
  timeout: 
    - 'connect 5s'
    - 'client 10s'
    - 'server 10s'
    - 'queue 30s'
    - 'check 10s'
    - 'http-keep-alive 1s'
    - 'http-request 15s'
  stats: 'enable'
profiles::haproxy::listen_services:
  stats:
    ipaddress: '192.168.65.5'
    ports: '80'
    mode: 'http'
    collect_exported: 'false'
    options:
      stats:
        - 'enable'
        - 'uri /haproxy?stats'
        - 'refresh 5s' 
        - 'show-legends' 
        - 'hide-version' 
profiles::haproxy::frontends:
  sp_http:
    ipaddress: '192.168.66.10'
    ports: '80'
    mode: 'http'
    collect_exported: 'false'
    options:
      option:
        - 'httplog clf'
        - 'http-server-close'
        - 'forwardfor'
      default_backend: 'sp_http_farm'
  sp_https:
    ipaddress: '192.168.66.10'
    ports: '443'
    mode: 'tcp'
    collect_exported: 'false'
    options:
      option:
        - 'tcplog'
      default_backend: 'sp_https_farm'
  idp_http:
    ipaddress: '192.168.66.20'
    ports: '80'
    mode: 'http'
    collect_exported: 'false'
    options:
      option:
        - 'httplog clf'
        - 'http-server-close'
        - 'forwardfor'
      default_backend: 'idp_http_farm'
  idp_https:
    ipaddress: '192.168.66.20'
    ports: '443'
    mode: 'tcp'
    collect_exported: 'false'
    options:
      option:
        - 'tcplog'
      default_backend: 'idp_https_farm'
  idp_https_soap:
    ipaddress: '192.168.66.20'
    ports: '8443'
    mode: 'tcp'
    collect_exported: 'false'
    options:
      option:
        - 'tcplog'
      default_backend: 'idp_https_soap_farm'
profiles::haproxy::backends:
  sp_http_farm:
    collect_exported: 'false'
    options:
      option:
        - 'httpchk'
      mode: 'http'
      server:
        - 'sp1 192.168.65.11:80 check'
        - 'sp2 192.168.65.12:80 check'
  sp_https_farm:
    collect_exported: 'false'
    options:
      # maximum SSL session ID length is 32 bytes.
      stick-table: 'type binary len 32 size 30k expire 30m'
      acl:
        - 'clienthello req_ssl_hello_type 1'
        - 'serverhello rep_ssl_hello_type 2'
      # use tcp content accepts to detects ssl client and server hello.
      tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if clienthello'
      tcp-response: 'content accept if serverhello'
      # SSL session ID (SSLID) may be present on a client or server hello.
      # Its length is coded on 1 byte at offset 43 and its value starts
      # at offset 44.
      # Match and learn on request if client hello.
      stick: 
        - 'on payload_lv(43,1) if clienthello'
      # Learn on response if server hello.
        - 'store-response payload_lv(43,1) if serverhello'
      mode: 'tcp'
      server:
        - 'sp1 192.168.65.11:443 check'
        - 'sp2 192.168.65.12:443 check'
  idp_http_farm:
    collect_exported: 'false'
    options:
      option:
        - 'httpchk'
      mode: 'http'
      server:
        - 'sp1 192.168.65.21:80 check'
        - 'sp2 192.168.65.22:80 check'
  idp_https_farm:
    collect_exported: 'false'
    options:
      stick-table: 'type binary len 32 size 30k expire 30m'
      acl:
        - 'clienthello req_ssl_hello_type 1'
        - 'serverhello rep_ssl_hello_type 2'
      tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if clienthello'
      tcp-response: 'content accept if serverhello'
      stick: 
        - 'on payload_lv(43,1) if clienthello'
        - 'store-response payload_lv(43,1) if serverhello'
      mode: 'tcp'
      server:
        - 'sp1 192.168.65.21:443 check'
        - 'sp2 192.168.65.22:443 check'

  idp_https_soap_farm:
    collect_exported: 'false'
    options:
      stick-table: 'type binary len 32 size 30k expire 30m'
      acl:
        - 'clienthello req_ssl_hello_type 1'
        - 'serverhello rep_ssl_hello_type 2'
      tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if clienthello'
      tcp-response: 'content accept if serverhello'
      stick: 
        - 'on payload_lv(43,1) if clienthello'
        - 'store-response payload_lv(43,1) if serverhello'
      mode: 'tcp'
      server:
        - 'sp1 192.168.65.21:8443 check'
        - 'sp2 192.168.65.22:8443 check'
profiles::haproxy::vip_network_config:
  vip_idp:
    interface: 'eth1:1'
    address: '192.168.66.10'
  vip_sp:
    interface: 'eth1:2'
    address: '192.168.66.20'
