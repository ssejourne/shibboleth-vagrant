global
    log 127.0.0.1 local0 notice
    maxconn 2000
    user haproxy
    group haproxy
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 2m

defaults
    log     global
    retries 3
    balance roundrobin
    option redispatch
    timeout connect  5000
    timeout client  10000
    timeout server  10000

## SP
listen http_sp 192.168.66.10:80
    mode http
    stats enable
    stats uri /haproxy?stats
    stats refresh 5s
    stats show-legends
    stats hide-version
    option httplog clf
    option http-server-close
    option forwardfor
    default_backend http_sp_farm

listen https_sp 192.168.66.10:443
    mode tcp
    option tcplog
    default_backend https_sp_farm

backend http_sp_farm
    mode http
    option httpchk
    server sp1 192.168.65.11:80 check
    server sp2 192.168.65.12:80 check

backend https_sp_farm
    mode tcp

    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
#    stick-table type string len 32 size 30k expire 30m

    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello

    # SSL session ID (SSLID) may be present on a client or server hello.
    # Its length is coded on 1 byte at offset 43 and its value starts
    # at offset 44.
    # Match and learn on request if client hello.
    stick on payload_lv(43,1) if clienthello
#    stick on ssl_fc_session_id

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    server sp1 192.168.65.11:443 check
    server sp2 192.168.65.12:443 check

## IDP
listen http_idp 192.168.66.20:80
    mode http
    stats enable
    stats uri /haproxy?stats
    stats refresh 5s
    stats show-legends
    stats hide-version
    option httplog clf
    option http-server-close
    option forwardfor
    default_backend http_idp_farm

listen https_idp 192.168.66.20:443
    mode tcp
    option tcplog
    default_backend https_idp_farm

listen https_idp_soap 192.168.66.20:8443
    mode tcp
    option tcplog
    default_backend https_idp_soap_farm

backend http_idp_farm
    mode http
    option httpchk
    server idp1 192.168.65.21:80 check
    server idp2 192.168.65.22:80 check

# Learn SSL session ID from both request and response and create affinity.
backend https_idp_farm
    mode tcp
 
    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
#    stick-table type string len 32 size 30k expire 30m
 
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2
 
    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello
 
    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
 
    # SSL session ID (SSLID) may be present on a client or server hello.
    # Its length is coded on 1 byte at offset 43 and its value starts
    # at offset 44.
    # Match and learn on request if client hello.
    stick on payload_lv(43,1) if clienthello
#    stick on ssl_fc_session_id
 
    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    server idp1 192.168.65.21:443 check
    server idp2 192.168.65.22:443 check

backend https_idp_soap_farm
    mode tcp
 
    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
#    stick-table type string len 32 size 30k expire 30m
 
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2
 
    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello
 
    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
 
    # SSL session ID (SSLID) may be present on a client or server hello.
    # Its length is coded on 1 byte at offset 43 and its value starts
    # at offset 44.
    # Match and learn on request if client hello.
    stick on payload_lv(43,1) if clienthello
#    stick on ssl_fc_session_id
 
    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    server idp1 192.168.65.21:8443 check
    server idp2 192.168.65.22:8443 check

